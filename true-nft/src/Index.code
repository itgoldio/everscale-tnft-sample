.pragma selector-save-my-code

.version sol 0.47.0

.macro constructor
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7_with_init_storage$
}
;; constructor protection
GETGLOB 6
THROWIF 51
TRUE
SETGLOB 6
;; end constructor protection
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
LDUQ 128
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDU 128
}
IFNOT
ENDS
;; param: root
;; param: sendGasToAddr
;; param: remainOnIndex
; constructor Index
GETGLOB 1
PUSHREF {
	DUP
	SETGLOB 1
	BLESS
	JMPX
}
NEWC
STSLICECONST x8adb35
STREF
STSLICE
ENDC
CALLREF {
	CTOS
	PUSH S0
	PUSHSLICE x8adb35
	SDEQ
	PUSHREFCONT {
		PLDREFIDX 1
		CTOS
		CALLREF {
			
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
		}
	}
	PUSHREFCONT {
		
			PLDREF
			CTOS
			PUSHSLICE xF4A4_
			SDBEGINSX
			LDDICT
			NIP
			LDU 10
			NIP
			PUSHSLICE xF4A1
			SDBEGINSX
			DUP
			SREFS
			GTINT 1
			PUSHCONT {
				PLDREFIDX 1
			}
			PUSHCONT {
				DROP
				NULL
			}
			IFELSE
	}
	IFELSE
}
;; decl: optSalt
;; push identifier optSalt
DUP
ISNULL
THROWIF 101
;; push identifier optSalt
BLKPUSH 2, 0
ISNULL
THROWIF 63
CTOS
LDMSGADDR
LDMSGADDR
; colValue
DROP
;; decl: addrRoot
;; decl: addrOwner
;; get member sender
GETGLOB 9
;; push identifier _addrNft
GETGLOB 12
SDEQ
THROWIFNOT 100
ACCEPT
;; get member balance
GETPARAM 7
INDEX 0
;; -
;; push identifier remainOnIndex
PUSH S4
SUB
UFITS 128
PUSHINT 1
RAWRESERVE
; expValue
; end expValue
;; push identifier addrRoot
PUSH S1
; colValue
SETGLOB 10
; end colValue
; expValue
; end expValue
;; push identifier addrOwner
DUP
; colValue
SETGLOB 11
; end colValue
;; if
;; push identifier addrRoot
PUSH S1
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SDEQ
PUSHCONT {
	; expValue
	; end expValue
	;; push identifier root
	PUSH S5
	; colValue
	SETGLOB 10
	; end colValue
}
IF
;; end if
; expValue
; end expValue
;; get member value
;; push identifier sendGasToAddr
PUSH S4
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
PUSHCONT {
	;; push identifier sendGasToAddr
	PUSH S4
}
PUSHCONT {
	;; get member sender
	GETGLOB 9
}
IFELSE
; colValue
POP S5
; end colValue
;; transfer()
;; push identifier sendGasToAddr
PUSH S4
NEWC
STSLICECONST x62_
STSLICE
PUSHINT 111
STZEROES
ENDC
PUSHINT 128
SENDRAWMSG
; end constructor Index
BLKDROP 6
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.macro getInfo
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDU 32
GETGLOB 4
ROT
SETINDEXQ 5
SETGLOB 4
ENDS
CALLREF {
	CALL $getInfo_internal_macro$
}
;; emitting 3 value(s)
PUSH S3
PUSHCONT {
	PUSH S5
	CTOS
	LDU 2
	LDMSGADDR
	DROP
	NIP
	NEWC
	STSLICECONST xc
	STSLICE
	PUSHINT 1
	STUR 98
	REVERSE 3, 1
	BLKSWAP 3, 1
	NEWC
	STSLICECONST x965f96c1
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	PUSHINT 0
	SENDRAWMSG
}
PUSHCONT {
	GETGLOB 4
	DUP
	INDEX 3
	PUSH S1
	INDEX 2
	GETGLOB 9
	BLKSWAP 1, 3
	INDEX 1
	NEWC
	PUSHINT 2
	STZEROES
	STI 1
	PUSHINT 3
	STZEROES
	STSLICE
	SWAP
	STGRAMS
	STDICT
	PUSHINT 1
	STUR 106
	REVERSE 3, 1
	BLKSWAP 3, 1
	NEWC
	GETGLOB 4
	INDEX 5
	STUR 32
	STSLICE
	ROTREV
	NEWC
	STSLICE
	SWAP
	NEWC
	STSLICE
	STBREFR
	STBREFR
	STBREFR
	ENDC
	GETGLOB 4
	INDEX 4
	SENDRAWMSG
}
IFELSE
IFREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	getInfo_internal
.type	getInfo_internal, @function
CALL $getInfo_internal_macro$

.macro getInfo_internal_macro
;; ret param: addrRoot
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrOwner
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
;; ret param: addrNft
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
; function getInfo
;; return
GETGLOB 4
PUSHINT 0
SETINDEXQ 2
PUSHINT 64
SETINDEXQ 4
SETGLOB 4
;; push identifier _addrRoot
GETGLOB 10
;; push identifier _addrOwner
GETGLOB 11
;; push identifier _addrNft
GETGLOB 12
BLKDROP2 3, 3
; end function getInfo

.macro destruct
DROP
GETGLOB 2
ISNULL
IFREF {
	CALL $c4_to_c7$
}
LDMSGADDRQ
PUSHCONT {
	;; load next cell
	LDREF
	ENDS
	CTOS
	LDMSGADDR
}
IFNOT
ENDS
;; param: sendGasToAddr
CALLREF {
	CALL $destruct_internal_macro$
}
CALLREF {
	CALL $c7_to_c4$
}
TRUE
SETGLOB 7

.globl	destruct_internal
.type	destruct_internal, @function
CALL $destruct_internal_macro$

.macro destruct_internal_macro
;; param: sendGasToAddr
; function destruct
;; get member sender
GETGLOB 9
;; push identifier _addrNft
GETGLOB 12
SDEQ
THROWIFNOT 100
;; if
;; get member value
;; push identifier sendGasToAddr
DUP
PARSEMSGADDR
INDEX 3
PLDU 256
NEQINT 0
PUSHCONT {
	;; push identifier sendGasToAddr
	DUP
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 111
	STZEROES
	ENDC
	PUSHINT 160
	SENDRAWMSG
}
PUSHCONT {
	;; push identifier _addrNft
	GETGLOB 12
	NEWC
	STSLICECONST x42_
	STSLICE
	PUSHINT 111
	STZEROES
	ENDC
	PUSHINT 160
	SENDRAWMSG
}
IFELSE
;; end if
; end function destruct
DROP

.macro c7_to_c4
GETGLOB 12
GETGLOB 11
GETGLOB 10
GETGLOB 6
GETGLOB 3
GETGLOB 2
NEWC
STU 256
STU 64
STI 1
STSLICE
ROTREV
NEWC
STSLICE
SWAP
NEWC
STSLICE
STBREFR
STBREFR
ENDC
POP C4

.macro c4_to_c7
PUSHROOT
CTOS
LDU 256      ; pubkey c4
LDU 64      ; pubkey timestamp c4
LDI 1       ; pubkey [timestamp] constructor_flag memory
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
;; load next cell
LDREF
ENDS
CTOS
LDMSGADDR
ENDS
SETGLOB 12
SETGLOB 11
SETGLOB 10
; pubkey [timestamp] constructor_flag
SETGLOB 6   ; pubkey [timestamp]
SETGLOB 3   ; pubkey
SETGLOB 2

.macro c4_to_c7_with_init_storage
PUSHROOT
CTOS
SBITS
GTINT 1
PUSHREFCONT {
	CALL $c4_to_c7$
}
PUSHCONT {
	PUSHINT 0
	PUSHROOT
	CTOS
	PLDDICT   ; D
	; init _addrRoot
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 10
	; init _addrOwner
	PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	SETGLOB 11
	; init _addrNft
	PUSHINT 1
	PUSH S1
	PUSHINT 64
	DICTUGET
	PUSHCONT {
		PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
	}
	IFNOT
	SETGLOB 12
	PUSHINT 64
	DICTUGET
	THROWIFNOT 61
	PLDU 256
	SETGLOB 2
	PUSHINT 0 ; timestamp
	SETGLOB 3
	PUSHINT 0 ; constructor_flag
	SETGLOB 6
}
IFELSE

.internal-alias :main_internal, 0
.internal :main_internal
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Function: main_internal
;; param: contract_balance
;; param: msg_balance
;; param: int_msg_info
;; param: msg_body_slice
;; param: transaction_type
PUSH S2
CTOS
LDU 4       ; bounced tail
LDMSGADDR   ; bounced src tail
DROP
SETGLOB 9
MODPOW2 1
; beg set default params for responsible func
GETGLOB 4
; bounce
TRUE
SETINDEXQ 1
; tons
PUSHINT 10000000
SETINDEXQ 2
; currency
NULL
SETINDEXQ 3
; flag
PUSHINT 0
SETINDEXQ 4
SETGLOB 4
; end set default params for responsible func
IFRET
PUSH S1    ; body
SEMPTY     ; isEmpty
IFRET
PUSH S1 ; body
LDUQ 32  ; [funcId] body' ok
THROWIFNOT 60 ; funcId body'
PUSH S1 ; funcId body' funcId
IFNOTRET
SWAP
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.internal-alias :main_external, -1
.internal :main_external
PUSHSLICE x8000000000000000000000000000000000000000000000000000000000000000001_
SETGLOB 9
PUSH S1
CALLREF {
	CALL $c4_to_c7_with_init_storage$
}
LDU 1 ; haveSign msgSlice
SWAP
PUSHCONT {
	PUSHINT 512
	LDSLICEX ; signatureSlice msgSlice
	DUP      ; signatureSlice msgSlice msgSlice
	HASHSU   ; signatureSlice msgSlice hashMsgSlice
	ROT
	GETGLOB 2
	CHKSIGNU      ; msgSlice isSigned
	THROWIFNOT 40 ; msgSlice
}
IF
LDU 64                         ; timestamp msgSlice
SWAP                           ; msgSlice timestamp
CALL $replay_protection_macro$ ; msgSlice
LDU 32  ; expireAt msgSlice
SWAP    ; msgSlice expireAt
NOW     ; msgSlice expireAt now
GREATER ; msgSlice expireAt>now
THROWIFNOT 57
LDU  32 ; funcId body
SWAP    ; body funcId
CALLREF {
	CALL $public_function_selector$
}
GETGLOB 7
ISNULL
THROWIF 60

.macro public_function_selector
DUP
PUSHINT 61058519
EQUAL
IFJMPREF {
	CALL $destruct$
}
DUP
PUSHINT 375363265
EQUAL
IFJMPREF {
	CALL $getInfo$
}
DUP
PUSHINT 1162810348
EQUAL
IFJMPREF {
	CALL $constructor$
}
